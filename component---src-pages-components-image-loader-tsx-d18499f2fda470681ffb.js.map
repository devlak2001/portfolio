{"version":3,"file":"component---src-pages-components-image-loader-tsx-d18499f2fda470681ffb.js","mappings":"gIAoEA,UAjEoB,KAClB,MAAM,EAACA,EAAS,EAAEC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC9C,EAACC,EAAa,EAAEC,IAAoBF,EAAAA,EAAAA,WAAkB,IACtD,EAACG,EAAU,EAAEC,IAAiBJ,EAAAA,EAAAA,WAAkB,IAChD,EAACK,EAAY,EAAEC,IAAmBN,EAAAA,EAAAA,WAAkB,GA2C1D,OA1CAO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAASC,MAAMC,KAAKC,SAASC,iBAAiB,eAAeC,KAChEC,GAASA,EAAyBC,MAYfC,WACpB,UACQC,QAAQC,IAAIV,EAAOK,KAAKC,IAAQK,OAXvBJ,EAWiCD,EAV3C,IAAIG,SAAc,CAACG,EAASC,KACjC,MAAMP,EAAM,IAAIQ,MAChBR,EAAIS,OAAS,IAAMH,IACnBN,EAAIU,QAAWC,GAAQJ,EAAOI,GAC9BX,EAAIC,IAAMA,CAAG,IALEA,KAWqC,KAEpDhB,GAAa,EAEf,CAAE,MAAO0B,GACPC,QAAQC,MAAM,6CAA8CF,EAC9D,GAEFG,EAAe,GACd,CAAC7B,KAEJQ,EAAAA,EAAAA,YAAU,KACRsB,YAAW,KACT3B,GAAiB,EAAK,GACrB,KAAK,GACP,CAACA,KAEJK,EAAAA,EAAAA,YAAU,KACJN,GAAiBH,IACnBM,GAAc,GACdyB,YAAW,KACTvB,GAAgB,EAAK,GACpB,KACL,GACC,CAACL,EAAeH,IAGjBgC,EAAAA,cAAAA,EAAAA,SAAAA,MACIzB,GACAyB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKC,UAAS,iBAAkB5B,EAAa,SAAW,KACtD2B,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,WAChBD,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,cAAa,YAE/BD,EAAAA,cAAAA,MAAAA,CAAKC,UAAS,iBAAkB5B,EAAa,SAAW,KACtD2B,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,WAChBD,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,cAAa,aAIlC,C","sources":["webpack://portfolio/./src/pages/components/ImageLoader.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst ImageLoader = () => {\r\n  const [allLoaded, setAllLoaded] = useState<boolean>(false);\r\n  const [minTimePassed, setMinTimePassed] = useState<boolean>(false);\r\n  const [hideLoader, setHideLoader] = useState<boolean>(false);\r\n  const [removeLoader, setRemoveLoader] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    const images = Array.from(document.querySelectorAll(\"header img\")).map(\r\n      (img) => (img as HTMLImageElement).src\r\n    );\r\n\r\n    const loadImage = (src: string) => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => resolve();\r\n        img.onerror = (err) => reject(err);\r\n        img.src = src;\r\n      });\r\n    };\r\n\r\n    const loadAllImages = async () => {\r\n      try {\r\n        await Promise.all(images.map((img) => loadImage(img)));\r\n        // console.log(\"All images have loaded!\");\r\n        setAllLoaded(true);\r\n        // Perform your desired action here\r\n      } catch (err) {\r\n        console.error(\"An error occurred while loading the images\", err);\r\n      }\r\n    };\r\n    loadAllImages();\r\n  }, [setAllLoaded]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setMinTimePassed(true);\r\n    }, 1500);\r\n  }, [setMinTimePassed]);\r\n\r\n  useEffect(() => {\r\n    if (minTimePassed && allLoaded) {\r\n      setHideLoader(true);\r\n      setTimeout(() => {\r\n        setRemoveLoader(true);\r\n      }, 1000);\r\n    }\r\n  }, [minTimePassed, allLoaded]);\r\n\r\n  return (\r\n    <>\r\n      {!removeLoader && (\r\n        <>\r\n          <div className={`ImageLoader1 ${hideLoader ? \"loaded\" : \"\"}`}>\r\n            <span className=\"loader\"></span>\r\n            <span className=\"loaderText\">LOADING</span>\r\n          </div>\r\n          <div className={`ImageLoader2 ${hideLoader ? \"loaded\" : \"\"}`}>\r\n            <span className=\"loader\"></span>\r\n            <span className=\"loaderText\">LOADING</span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  ); // or you can return a loading indicator component here\r\n};\r\n\r\nexport default ImageLoader;\r\n"],"names":["allLoaded","setAllLoaded","useState","minTimePassed","setMinTimePassed","hideLoader","setHideLoader","removeLoader","setRemoveLoader","useEffect","images","Array","from","document","querySelectorAll","map","img","src","async","Promise","all","loadImage","resolve","reject","Image","onload","onerror","err","console","error","loadAllImages","setTimeout","React","className"],"sourceRoot":""}